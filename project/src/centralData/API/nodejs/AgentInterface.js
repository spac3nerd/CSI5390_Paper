//
// Autogenerated by Thrift Compiler (0.13.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;
var Int64 = require('node-int64');


var ttypes = require('./jstest_types');
//HELPER FUNCTIONS AND STRUCTURES

var AgentInterface_GetTokenByName_args = function(args) {
  this.name = null;
  if (args) {
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
  }
};
AgentInterface_GetTokenByName_args.prototype = {};
AgentInterface_GetTokenByName_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AgentInterface_GetTokenByName_args.prototype.write = function(output) {
  output.writeStructBegin('AgentInterface_GetTokenByName_args');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AgentInterface_GetTokenByName_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
AgentInterface_GetTokenByName_result.prototype = {};
AgentInterface_GetTokenByName_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AgentInterface_GetTokenByName_result.prototype.write = function(output) {
  output.writeStructBegin('AgentInterface_GetTokenByName_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AgentInterface_SetLookAt_args = function(args) {
  this.token = null;
  this.direction = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.direction !== undefined && args.direction !== null) {
      this.direction = new ttypes.Point(args.direction);
    }
  }
};
AgentInterface_SetLookAt_args.prototype = {};
AgentInterface_SetLookAt_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.direction = new ttypes.Point();
        this.direction.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AgentInterface_SetLookAt_args.prototype.write = function(output) {
  output.writeStructBegin('AgentInterface_SetLookAt_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.direction !== null && this.direction !== undefined) {
    output.writeFieldBegin('direction', Thrift.Type.STRUCT, 2);
    this.direction.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AgentInterface_SetLookAt_result = function(args) {
};
AgentInterface_SetLookAt_result.prototype = {};
AgentInterface_SetLookAt_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AgentInterface_SetLookAt_result.prototype.write = function(output) {
  output.writeStructBegin('AgentInterface_SetLookAt_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AgentInterface_SetMove_args = function(args) {
  this.token = null;
  this.x = null;
  this.y = null;
  this.z = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.x !== undefined && args.x !== null) {
      this.x = args.x;
    }
    if (args.y !== undefined && args.y !== null) {
      this.y = args.y;
    }
    if (args.z !== undefined && args.z !== null) {
      this.z = args.z;
    }
  }
};
AgentInterface_SetMove_args.prototype = {};
AgentInterface_SetMove_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.DOUBLE) {
        this.x = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.DOUBLE) {
        this.y = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.DOUBLE) {
        this.z = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AgentInterface_SetMove_args.prototype.write = function(output) {
  output.writeStructBegin('AgentInterface_SetMove_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.x !== null && this.x !== undefined) {
    output.writeFieldBegin('x', Thrift.Type.DOUBLE, 2);
    output.writeDouble(this.x);
    output.writeFieldEnd();
  }
  if (this.y !== null && this.y !== undefined) {
    output.writeFieldBegin('y', Thrift.Type.DOUBLE, 3);
    output.writeDouble(this.y);
    output.writeFieldEnd();
  }
  if (this.z !== null && this.z !== undefined) {
    output.writeFieldBegin('z', Thrift.Type.DOUBLE, 4);
    output.writeDouble(this.z);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AgentInterface_SetMove_result = function(args) {
};
AgentInterface_SetMove_result.prototype = {};
AgentInterface_SetMove_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AgentInterface_SetMove_result.prototype.write = function(output) {
  output.writeStructBegin('AgentInterface_SetMove_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AgentInterface_Fire_args = function(args) {
  this.token = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
  }
};
AgentInterface_Fire_args.prototype = {};
AgentInterface_Fire_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AgentInterface_Fire_args.prototype.write = function(output) {
  output.writeStructBegin('AgentInterface_Fire_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AgentInterface_Fire_result = function(args) {
};
AgentInterface_Fire_result.prototype = {};
AgentInterface_Fire_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AgentInterface_Fire_result.prototype.write = function(output) {
  output.writeStructBegin('AgentInterface_Fire_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AgentInterface_GetSceneData_args = function(args) {
  this.token = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
  }
};
AgentInterface_GetSceneData_args.prototype = {};
AgentInterface_GetSceneData_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AgentInterface_GetSceneData_args.prototype.write = function(output) {
  output.writeStructBegin('AgentInterface_GetSceneData_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AgentInterface_GetSceneData_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
AgentInterface_GetSceneData_result.prototype = {};
AgentInterface_GetSceneData_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AgentInterface_GetSceneData_result.prototype.write = function(output) {
  output.writeStructBegin('AgentInterface_GetSceneData_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AgentInterface_GetImageData_args = function(args) {
  this.token = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
  }
};
AgentInterface_GetImageData_args.prototype = {};
AgentInterface_GetImageData_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AgentInterface_GetImageData_args.prototype.write = function(output) {
  output.writeStructBegin('AgentInterface_GetImageData_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AgentInterface_GetImageData_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
AgentInterface_GetImageData_result.prototype = {};
AgentInterface_GetImageData_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AgentInterface_GetImageData_result.prototype.write = function(output) {
  output.writeStructBegin('AgentInterface_GetImageData_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AgentInterface_GetPose_args = function(args) {
  this.token = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
  }
};
AgentInterface_GetPose_args.prototype = {};
AgentInterface_GetPose_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AgentInterface_GetPose_args.prototype.write = function(output) {
  output.writeStructBegin('AgentInterface_GetPose_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AgentInterface_GetPose_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.Pose(args.success);
    }
  }
};
AgentInterface_GetPose_result.prototype = {};
AgentInterface_GetPose_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.Pose();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AgentInterface_GetPose_result.prototype.write = function(output) {
  output.writeStructBegin('AgentInterface_GetPose_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AgentInterfaceClient = exports.Client = function(output, pClass) {
  this.output = output;
  this.pClass = pClass;
  this._seqid = 0;
  this._reqs = {};
};
AgentInterfaceClient.prototype = {};
AgentInterfaceClient.prototype.seqid = function() { return this._seqid; };
AgentInterfaceClient.prototype.new_seqid = function() { return this._seqid += 1; };

AgentInterfaceClient.prototype.GetTokenByName = function(name, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_GetTokenByName(name);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_GetTokenByName(name);
  }
};

AgentInterfaceClient.prototype.send_GetTokenByName = function(name) {
  var output = new this.pClass(this.output);
  var params = {
    name: name
  };
  var args = new AgentInterface_GetTokenByName_args(params);
  try {
    output.writeMessageBegin('GetTokenByName', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

AgentInterfaceClient.prototype.recv_GetTokenByName = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new AgentInterface_GetTokenByName_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('GetTokenByName failed: unknown result');
};

AgentInterfaceClient.prototype.SetLookAt = function(token, direction, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_SetLookAt(token, direction);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_SetLookAt(token, direction);
  }
};

AgentInterfaceClient.prototype.send_SetLookAt = function(token, direction) {
  var output = new this.pClass(this.output);
  var params = {
    token: token,
    direction: direction
  };
  var args = new AgentInterface_SetLookAt_args(params);
  try {
    output.writeMessageBegin('SetLookAt', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

AgentInterfaceClient.prototype.recv_SetLookAt = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new AgentInterface_SetLookAt_result();
  result.read(input);
  input.readMessageEnd();

  callback(null);
};

AgentInterfaceClient.prototype.SetMove = function(token, x, y, z, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_SetMove(token, x, y, z);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_SetMove(token, x, y, z);
  }
};

AgentInterfaceClient.prototype.send_SetMove = function(token, x, y, z) {
  var output = new this.pClass(this.output);
  var params = {
    token: token,
    x: x,
    y: y,
    z: z
  };
  var args = new AgentInterface_SetMove_args(params);
  try {
    output.writeMessageBegin('SetMove', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

AgentInterfaceClient.prototype.recv_SetMove = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new AgentInterface_SetMove_result();
  result.read(input);
  input.readMessageEnd();

  callback(null);
};

AgentInterfaceClient.prototype.Fire = function(token, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_Fire(token);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_Fire(token);
  }
};

AgentInterfaceClient.prototype.send_Fire = function(token) {
  var output = new this.pClass(this.output);
  var params = {
    token: token
  };
  var args = new AgentInterface_Fire_args(params);
  try {
    output.writeMessageBegin('Fire', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

AgentInterfaceClient.prototype.recv_Fire = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new AgentInterface_Fire_result();
  result.read(input);
  input.readMessageEnd();

  callback(null);
};

AgentInterfaceClient.prototype.GetSceneData = function(token, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_GetSceneData(token);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_GetSceneData(token);
  }
};

AgentInterfaceClient.prototype.send_GetSceneData = function(token) {
  var output = new this.pClass(this.output);
  var params = {
    token: token
  };
  var args = new AgentInterface_GetSceneData_args(params);
  try {
    output.writeMessageBegin('GetSceneData', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

AgentInterfaceClient.prototype.recv_GetSceneData = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new AgentInterface_GetSceneData_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('GetSceneData failed: unknown result');
};

AgentInterfaceClient.prototype.GetImageData = function(token, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_GetImageData(token);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_GetImageData(token);
  }
};

AgentInterfaceClient.prototype.send_GetImageData = function(token) {
  var output = new this.pClass(this.output);
  var params = {
    token: token
  };
  var args = new AgentInterface_GetImageData_args(params);
  try {
    output.writeMessageBegin('GetImageData', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

AgentInterfaceClient.prototype.recv_GetImageData = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new AgentInterface_GetImageData_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('GetImageData failed: unknown result');
};

AgentInterfaceClient.prototype.GetPose = function(token, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_GetPose(token);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_GetPose(token);
  }
};

AgentInterfaceClient.prototype.send_GetPose = function(token) {
  var output = new this.pClass(this.output);
  var params = {
    token: token
  };
  var args = new AgentInterface_GetPose_args(params);
  try {
    output.writeMessageBegin('GetPose', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

AgentInterfaceClient.prototype.recv_GetPose = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new AgentInterface_GetPose_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('GetPose failed: unknown result');
};
var AgentInterfaceProcessor = exports.Processor = function(handler) {
  this._handler = handler;
};
AgentInterfaceProcessor.prototype.process = function(input, output) {
  var r = input.readMessageBegin();
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output);
  } else {
    input.skip(Thrift.Type.STRUCT);
    input.readMessageEnd();
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
    output.writeMessageBegin(r.fname, Thrift.MessageType.EXCEPTION, r.rseqid);
    x.write(output);
    output.writeMessageEnd();
    output.flush();
  }
};
AgentInterfaceProcessor.prototype.process_GetTokenByName = function(seqid, input, output) {
  var args = new AgentInterface_GetTokenByName_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.GetTokenByName.length === 1) {
    Q.fcall(this._handler.GetTokenByName.bind(this._handler),
      args.name
    ).then(function(result) {
      var result_obj = new AgentInterface_GetTokenByName_result({success: result});
      output.writeMessageBegin("GetTokenByName", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("GetTokenByName", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.GetTokenByName(args.name, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new AgentInterface_GetTokenByName_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("GetTokenByName", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("GetTokenByName", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
AgentInterfaceProcessor.prototype.process_SetLookAt = function(seqid, input, output) {
  var args = new AgentInterface_SetLookAt_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.SetLookAt.length === 2) {
    Q.fcall(this._handler.SetLookAt.bind(this._handler),
      args.token,
      args.direction
    ).then(function(result) {
      var result_obj = new AgentInterface_SetLookAt_result({success: result});
      output.writeMessageBegin("SetLookAt", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("SetLookAt", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.SetLookAt(args.token, args.direction, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new AgentInterface_SetLookAt_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("SetLookAt", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("SetLookAt", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
AgentInterfaceProcessor.prototype.process_SetMove = function(seqid, input, output) {
  var args = new AgentInterface_SetMove_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.SetMove.length === 4) {
    Q.fcall(this._handler.SetMove.bind(this._handler),
      args.token,
      args.x,
      args.y,
      args.z
    ).then(function(result) {
      var result_obj = new AgentInterface_SetMove_result({success: result});
      output.writeMessageBegin("SetMove", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("SetMove", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.SetMove(args.token, args.x, args.y, args.z, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new AgentInterface_SetMove_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("SetMove", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("SetMove", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
AgentInterfaceProcessor.prototype.process_Fire = function(seqid, input, output) {
  var args = new AgentInterface_Fire_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.Fire.length === 1) {
    Q.fcall(this._handler.Fire.bind(this._handler),
      args.token
    ).then(function(result) {
      var result_obj = new AgentInterface_Fire_result({success: result});
      output.writeMessageBegin("Fire", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("Fire", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.Fire(args.token, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new AgentInterface_Fire_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("Fire", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("Fire", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
AgentInterfaceProcessor.prototype.process_GetSceneData = function(seqid, input, output) {
  var args = new AgentInterface_GetSceneData_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.GetSceneData.length === 1) {
    Q.fcall(this._handler.GetSceneData.bind(this._handler),
      args.token
    ).then(function(result) {
      var result_obj = new AgentInterface_GetSceneData_result({success: result});
      output.writeMessageBegin("GetSceneData", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("GetSceneData", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.GetSceneData(args.token, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new AgentInterface_GetSceneData_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("GetSceneData", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("GetSceneData", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
AgentInterfaceProcessor.prototype.process_GetImageData = function(seqid, input, output) {
  var args = new AgentInterface_GetImageData_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.GetImageData.length === 1) {
    Q.fcall(this._handler.GetImageData.bind(this._handler),
      args.token
    ).then(function(result) {
      var result_obj = new AgentInterface_GetImageData_result({success: result});
      output.writeMessageBegin("GetImageData", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("GetImageData", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.GetImageData(args.token, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new AgentInterface_GetImageData_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("GetImageData", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("GetImageData", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
AgentInterfaceProcessor.prototype.process_GetPose = function(seqid, input, output) {
  var args = new AgentInterface_GetPose_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.GetPose.length === 1) {
    Q.fcall(this._handler.GetPose.bind(this._handler),
      args.token
    ).then(function(result) {
      var result_obj = new AgentInterface_GetPose_result({success: result});
      output.writeMessageBegin("GetPose", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("GetPose", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.GetPose(args.token, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new AgentInterface_GetPose_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("GetPose", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("GetPose", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
